version: 2.1
orbs:
  sonarcloud: sonarsource/sonarcloud@2.0.0
jobs:
  branch-build:
    working_directory: ~/cafienne-engine
    machine:
      image: ubuntu-2404:2024.11.1
    resource_class: large
    steps:
      - build-preparation
      - sonarcloud/scan
      - docker-login
      - setup-test-infra
      - build-docker-image
      - run-in-memory-tests
      - show-engine-logs-on-fail

  cluster-build:
    working_directory: ~/cafienne-engine
    machine:
      image: ubuntu-2404:2024.11.1
    resource_class: large
    steps:
      - build-preparation
      - sonarcloud/scan
      - docker-login
      - setup-test-infra
      - setup-databases
      - build-docker-image
      - run-cluster-tests

  main-build:
    working_directory: ~/cafienne-engine
    machine:
      image: ubuntu-2404:2024.11.1
    resource_class: large
    steps:
      - build-preparation
      - sonarcloud/scan
      - docker-login
      - setup-test-infra
      - setup-databases
      - build-docker-image
      - run-in-memory-tests
      - run-jdbc-tests
      - run-cassandra-tests
      - run-cluster-tests
      - show-engine-logs-on-fail
      - reset-git-local-changes
      # All good; if we're really on the main branch, create and run setup of multi architecture build, then push the image to docker hub.
      - run:
          name: Push Cafienne 'latest' image to docker hub (only on main branch)
          command: |
            if [ "${CIRCLE_BRANCH}" == "main" ];
            then
              docker buildx create --use --name multi-arch-builder
              sbt docker:stage
              docker buildx build --platform=linux/arm64,linux/amd64 --push -t cafienne/engine:latest ./service/target/docker/stage
            else
              echo "Not pushing image to docker hub"
            fi

  
  release-build:
    working_directory: ~/cafienne-engine
    machine:
      image: ubuntu-2404:2024.11.1
    resource_class: large
    steps:
      - build-preparation
      - docker-login
      - setup-test-infra
      - setup-databases
      - build-docker-image
      - run-in-memory-tests
      - run-jdbc-tests
      - run-cassandra-tests
      - show-engine-logs-on-fail
      - reset-git-local-changes
      # All good, create and run setup of multi architecture build, then push the image to docker hub to latest and to release tags.
      - run:
          name: Push Cafienne 'latest' and '$CIRCLE_TAG' image to docker hub
          command: |
            docker buildx create --use --name multi-arch-builder
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
            sbt docker:stage
            docker buildx build --platform=linux/arm64,linux/amd64 --push -t cafienne/engine:latest -t cafienne/engine:$CIRCLE_TAG ./service/target/docker/stage

commands:
  build-preparation:
    steps:
      - checkout
      - run:
          name: Clone CMMN-test framework (and optionally checkout corresponding test branch)
          command: |
            cd ..
            git clone https://$GIT_USER:$GIT_TOKEN@github.com/cafienne/cmmn-test-framework.git
            cd ./cmmn-test-framework
            echo "Trying to checkout corresponding test branch" 
            echo
            git checkout $CIRCLE_BRANCH || git checkout main
      - run:
          name: Compile code
          command: sbt compile
      - run:
          name: Unit tests
          command: cat /dev/null | sbt coverage test coverageReport
      - run:
          name: Compile CMMN Test Framwork
          command: |
            cd ..
            cd ./cmmn-test-framework
            npm install
            sudo chmod -R 777 ./
            echo
            echo ==== listing files
            ls
            echo
            echo ==== listing ./dist folder
            if [[ -d dist ]]; then 
              ls ./dist
              echo
              echo ==== removing ./dist
              sudo rm -rf ./dist
            else 
              echo -- dist folder is not present --
            fi
            echo
            echo ==== listing files
            ls
            echo
            echo ==== compiling
            npm run build
            echo
            echo ==== listing ./dist folder
            ls ./dist
            echo

  build-docker-image:
    steps:
      # Build the image to test
      - run:
          name: Build and publish local docker image 'cafienne/engine:latest'
          command: sbt docker:publishLocal

  docker-login:
    steps:
      - run:
          name: Docker login
          command: echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin

  setup-test-infra:
    steps:
      - run:
          name: Pull Mailcatcher and IDP docker images
          command: |
            docker-compose -f .circleci/docker-config/base-infra.yml pull
      # Start the basic container infrastructure
      - run:
          name: Start IDP and mailcatcher
          command: |
            docker-compose -f .circleci/docker-config/base-infra.yml up -d


  setup-databases:
    steps:
      - run:
          name: Pull DB docker images
          command: |
            docker-compose -f .circleci/docker-config/databases.yml pull
      - run:
          name: Start DB containers
          command: |
            docker-compose -f .circleci/docker-config/databases.yml up -d
            sleep 10
            # docker-compose -f .circleci/docker-config/databases-compatibility.yml pull


  run-in-memory-tests:
    steps:
    # Starting docker environment for anonymous start case testing
    - run:
        name: Start Cafienne Engine for anonymous start case testing
        command: |
          docker-compose -f .circleci/docker-config/engine-with-anonymous-configuration.yml up -d cafienne
          sleep 10
    - run:
        name: Docker logs of engine before running test
        command: |
          sudo chmod -R 777 ./
          docker logs cafienne
    - run:
        name: Test StartCase anonymously
        command: |
          cd ..
          cd ./cmmn-test-framework
          echo ==== starting tests
          echo
          npm run test PingTokenService PingTestEnvironment TestSwagger TestAnonymousStartCase
    - run:
        name: Test pure CMMN Fault Handling
        command: |
          cd ..
          cd ./cmmn-test-framework
          echo ==== starting tests
          echo
          npm run test TestNoFaultBubbling
    - run:
        name: Docker logs of engine after the test
        command: docker logs cafienne
    - run:
        name: Stop and remove the Cafienne container
        command: docker rm -f cafienne

    # Starting docker environment for testing start case with inline definitions
    - run:
        name: Start Cafienne Engine for testing start case with inline definitions
        command: |
          docker-compose -f .circleci/docker-config/engine-with-startcase-with-definition-configuration.yml up -d cafienne
          sleep 10
    - run:
        name: Docker logs of engine before running test
        command: |
          sudo chmod -R 777 ./
          docker logs cafienne
    - run:
        name: Test StartCase With Inline Definition
        command: |
          cd ..
          cd ./cmmn-test-framework
          npm run test PingTokenService PingTestEnvironment TestSwagger TestDefinitionInStartCase
    - run:
        name: Docker logs of engine after the test
        command: docker logs cafienne
    - run:
        name: Stop and remove the Cafienne container
        command: docker rm -f cafienne

    # Starting docker environment for in-memory testing
    - run:
        name: Start Cafienne Engine for in-memory testing
        command: |
          docker-compose -f .circleci/docker-config/engine-with-inmemory-db.yml up -d cafienne
          sleep 10
    - run:
        name: Docker logs of engine before running test
        command: |
          sudo chmod -R 777 ./
          docker logs cafienne
    - run:
        name: Test engine against framework
        command: |
          cd ..
          cd ./cmmn-test-framework
          npm run test
    - run:
        name: Test archival & deletion
        command: |
          cd ..
          cd ./cmmn-test-framework
          npm run test storage
    - run:
        name: Docker logs of engine after the test
        command: docker logs cafienne
    - run:
        name: Stop and remove the Cafienne container
        command: docker rm -f cafienne

  run-jdbc-tests:
    steps:
      # Starting docker environment for MS SQL Server testing
      - run:
          name: Start Cafienne Engine for MS SQL Server testing
          command: |
            sudo docker-compose -f .circleci/docker-config/engine-with-sqlserver-empty.yml up -d cafienne
            sleep 10
      - run:
          name: Docker logs of database
          command: |
            docker logs empty-sql-server
      - run:
          name: Docker logs of engine before starting test
          command: docker logs cafienne
      - run:
          name: Test engine against framework
          command: |
            cd ..
            cd ./cmmn-test-framework
            npm run test
      - run:
          name: Test archival & deletion
          command: |
            cd ..
            cd ./cmmn-test-framework
            npm run test storage
      - run:
          name: Docker logs of engine after the test
          command: docker logs cafienne
      # Stop engine, but also the sql server "without events" instance, and start the one "with events" for later usage
      - run:
          name: Stop and remove the Cafienne container, and also MS SQL Server container
          command: |
            docker rm -f cafienne empty-sql-server
            sleep 3
            docker-compose -f .circleci/docker-config/databases-compatibility.yml up -d sql-server-with-events

      # Starting docker environment for PostgreSQL testing
      - run:
          name: Start Cafienne Engine for PostgreSQL testing
          command: |
            sudo docker-compose -f .circleci/docker-config/engine-with-postgres-empty.yml up -d cafienne
            sleep 10
      - run:
          name: Docker logs of database
          command: |
            echo 
            echo Logs for empty PostgreSQL event database
            echo
            docker logs postgres-empty-event-db
            echo 
            echo Logs for PostgreSQL query database
            echo
            docker logs postgres-empty-query-db
      - run:
          name: Docker logs of engine before starting test
          command: docker logs cafienne
      - run:
          name: Test engine against framework
          command: |
            cd ..
            cd ./cmmn-test-framework
            npm run test
      - run:
          name: Test archival & deletion
          command: |
            cd ..
            cd ./cmmn-test-framework
            npm run test storage
      - run:
          name: Docker logs of engine after the test
          command: docker logs cafienne
      - run:
          name: Stop and remove the Cafienne container
          command: docker rm -f cafienne

  run-cluster-tests:
    steps:
      # Starting docker environment for Cluster testing
      - run:
          name: Create test folders
          command: |
            mkdir definitions
            chmod 777 definitions
            mkdir -p .circleci/run/cafienne/archive1
            mkdir -p .circleci/run/cafienne/archive2
            chmod 777 .circleci/run/cafienne/archive*
      - run:
          name: Start Cafienne Engine for Cluster testing
          command: |
            sudo docker-compose -f .circleci/docker-config/cluster-engine-with-postgres.yml up -d
            sleep 10
      - run:
          name: Docker logs of database
          command: |
            docker-compose -f .circleci/docker-config/databases.yml logs postgres-for-cluster
      - run:
          name: Docker logs of cluster engine before starting test
          command: docker-compose -f .circleci/docker-config/cluster-engine-with-postgres.yml logs
      - run:
          name: Test engine against framework
          command: |
            cd ..
            cd ./cmmn-test-framework
            npm run test
      - run:
          name: Test archival & deletion
          command: |
            cd ..
            cd ./cmmn-test-framework
            npm run test storage
      - run:
          name: Docker logs of engine after the test
          command: docker-compose -f .circleci/docker-config/cluster-engine-with-postgres.yml logs
      - run:
          name: Docker logs of database
          command: |
            echo 
            echo Logs for PostgreSQL cluster database
            echo
            docker-compose -f .circleci/docker-config/databases.yml logs postgres-for-cluster
      - run:
          name: Stop and remove the Cafienne container
          command: docker-compose -f .circleci/docker-config/cluster-engine-with-postgres.yml down
      - run:
          name: Docker logs of node1 after the test
          command: docker-compose -f .circleci/docker-config/cluster-engine-with-postgres.yml logs cafienne1
          when: on_fail
      - run:
          name: Docker logs of node2 after the test
          command: docker-compose -f .circleci/docker-config/cluster-engine-with-postgres.yml logs cafienne2
          when: on_fail

  run-cassandra-tests:
    steps:
      # Starting docker environment for Cassandra testing
      - run:
          name: Start Cafienne Engine for Cassandra testing
          command: |
            sudo docker-compose -f .circleci/docker-config/engine-with-cassandra.yml up -d cafienne
            sleep 10
      - run:
          name: Docker logs of database
          command: |
            echo 
            echo Logs for Cassandra event database
            echo
            docker logs cassandra
            echo 
            echo Logs for PostgreSQL query database
            echo
            docker logs postgres-for-cassandra
      - run:
          name: Docker logs of engine before starting test
          command: docker logs cafienne
      - run:
          name: Test engine against framework
          command: |
            cd ..
            cd ./cmmn-test-framework
            npm run test
      - run:
          name: Stop and remove the Cafienne container
          command: |
            docker logs cafienne
            docker rm -f cafienne

  show-engine-logs-on-fail:
    steps:
      # Always show docker logs. This will give the cafienne engine console info when any of above tests fails.
      - run:
          name: Docker logs of engine after the test
          command: docker logs cafienne
          when: on_fail

  reset-git-local-changes:
    steps:
      - run:
          name: Reset git local changes
          command: |
            echo "Run git reset --hard"
            git reset --hard
            echo
            echo "Show git status"
            echo
            git status

workflows:
  version: 2
  ci:
    jobs:
      - main-build:
          context: automation-context
          filters:
            branches:
              only:
                - main
                - dependency-updates
                - run-compatibility-tests
      - branch-build:
          context: automation-context
          filters:
            branches:
              ignore:
                - main
                - dependency-updates
                - run-compatibility-tests
                - reintroduce-cluster
      - cluster-build:
          context: automation-context
          filters:
            branches:
              only:
                - reintroduce-cluster
      - release-build:
          context: automation-context
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
